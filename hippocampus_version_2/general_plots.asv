%% general plots 

%% Set parameters for the simulation
p.degree_overlap_CA3  = 0.2;          % Overlap between neural representations of each odour
p.degree_overlap_CA1  = 0.0;
p.start_time          = 100;          % Time at which the first odour is presented (ms)
p.length_first        = 40;           % Length of time for which the first odour is presented (ms)
p.delay_time          = 700;          % Delay between odour presentations (ms)
p.length_second       = 40;           % Length of time for which the second odour is presented (ms)
p.scaleF              = 0.85;         % Constant by which to scale random currents (to modulate baseline activity levels)
p                     = get_params_hipp(p);

% do we want to constrain the overlap of CA1 populations which receive
% input from corresponding CA3 populaitons? or have projections be
% completely random


%  Assign CA3 cells to each odour representation
CA3_populations = get_odours_hipp(p, "OFF");
CA1_populations = get_odours_hipp(p, "ON");

% take first and second odour to be presented 
mems = cell(2,1); 
first = double(upper(p.pattern_order(1))) - 64; 
mems{1} = CA3_populations{first};
second = double(upper(p.pattern_order(2))) - 64; 
mems{2} = CA3_populations{second};

%  Generate connectivity and synaptic efficacy matrix
% p.c = .9;
overlap_control     = "OFF";
[C, J]              = connectivity_matrix_hipp(p, overlap_control, CA3_populations, CA1_populations);

%  Specify times that each odour is presented, assign memory for the output
input.simulation    = [p.start_time p.start_time+p.length_first];
input.reactivation  = [p.start_time+p.length_first+p.delay_time p.start_time+p.length_first+p.delay_time+p.length_second];
M                   = get_memory_hipp(p);

%% 
M = simulate_dynamics_hipp(p, C, J, input, M, mems);
output_plot         = get_output_plot(M,p.pattern_order, p, mems, C);

%% plot 1     M = simulate_dynamics_hipp(p, C, J, input, M, mems);
% [mean_firing_second_odour] = get_mean_firing_second_odour(p, C, J, input, M, mems, p.length_second);

%% plot 2
number_of_trials = 50;

firing_rate_data = cell(2, 5);

firing_rate_data{1, 1} = 'background_CA3_Hz';
firing_rate_data{1, 2} = 'background_CA1_Hz';
firing_rate_data{1, 3} = 'CA3_stimulated_Hz';
% firing_rate_data{1, 3} = 'CA3_overlap_Hz';
firing_rate_data{1, 4} = 'CA1_stimulated_Hz';
firing_rate_data{1, 5} = 'CA1_overlap_Hz';


% get CA1 cells which are able to receive input from both A and B
overlap_CA3 = intersect(CA3_populations{first}, CA3_populations{second});
ind = find((sum(C(overlap_CA3, :))>0)); 
CA1_overlap = intersect(CA1_populations{second}, ind);
not_ind = ~ismember(CA1_populations{second}, ind);
CA1_non_overlap = CA1_populations{second};
CA1_non_overlap = CA1_non_overlap(not_ind);
% 
% CA1_overlap = CA1_overlap(1:10);
% CA1_non_overlap = CA1_non_overlap(1:10);

% get subpopulations to plot
% filter = 8;
% overlap_CA3 = intersect(CA3_populations{first}, CA3_populations{second});
% % overlap_CA1 = intersect(CA1_populations{first}, CA1_populations{second});
% ind1 = find((sum(C(mems{1}, :))>filter)); 
% ind2 = find((sum(C(mems{2}, :))>filter)); 
% coi = intersect(ind1,ind2);
% full = find((sum(C(mems{2}, :))>0)); 
% % Find elements in list1 that are not in list2
% logical_index = ~ismember(full, coi);
% % Use logical indexing to select elements from list1
% non_overlap_CA1 = full(logical_index);
% overlap_CA1 = coi;
% % non_overlap_CA1 = CA1_populations{second};
% % ind = ~ismember(non_overlap_CA1, overlap_CA1);
% non_overlap_CA1 = non_overlap_CA1(ind);

time1 = input.reactivation(1);
time2 = input.reactivation(2);
% time1 = input.reactivation(2);
% time2 = input.reactivation(2)+200;

for i = 1:number_of_trials
        
    % simulate a trial
    M                   = get_memory_hipp(p);
    M = simulate_dynamics_hipp(p, C, J, input, M, mems);
    
    % get mean background firing rate CA3 (in)
    background_CA3_Hz = get_mean_rate(M, 1, p.SimLength, 1:p.in); 
    firing_rate_data{2, 1} = [firing_rate_data{2, 1}, background_CA3_Hz];

    % get mean background firing rate CA1 (out)
    background_CA1_Hz = get_mean_rate(M, 1, p.SimLength, p.in+1:p.full);
    firing_rate_data{2, 2} = [firing_rate_data{2, 2}, background_CA1_Hz];

    % get mean firing rate of presynaptic simulated cells during odour 2
    CA3_simulated_Hz = get_mean_rate(M, time1, time2, CA3_populations{second});
    firing_rate_data{2, 3} = [firing_rate_data{2, 3}, CA3_simulated_Hz];
    % 
    % % get mean firing rate of overlapping CA3 cells during odour 2
    % CA3_overlap_Hz = get_mean_rate(M, input.reactivation(1), input.reactivation(2), overlap_CA3);
    % firing_rate_data{2, 3} = [firing_rate_data{2, 3}, CA3_overlap_Hz];

    % get mean firing rate of postsynaptic simulated cells during odour 2
    CA1_simulated_Hz = get_mean_rate(M, time1, time2, p.in+non_overlap_CA1);
    firing_rate_data{2, 4} = [firing_rate_data{2, 4}, CA1_simulated_Hz];

    % get mean firing rate of overlaping CA1 cells during odour 2
    CA1_overlap_Hz = get_mean_rate(M, time1, time2, p.in+overlap_CA1);
    firing_rate_data{2, 5} = [firing_rate_data{2, 5}, CA1_overlap_Hz];

    disp(i)
end
        
%% plot swarm chart                            
variable_names = firing_rate_data(1,:);
data = firing_rate_data(2,:);

figure;
for i = 1:numel(variable_names)
    
    % Swarm plot
    swarmchart(i.*ones(1, number_of_trials), data{i});
    hold on;
    
    % Add mean bar
    mean_value = mean(data{i});
    plot([i-0.1 i+0.1], [mean_value mean_value], '-k', 'LineWidth', 2);
       
    hold on;
end  

% Set x-axis tick and label
xticks(1:numel(variable_names)); 
xticklabels(strrep(variable_names, '_', ' '));
ylabel('Hz');

% Extract variable names and data
variable_names = firing_rate_data(1,:);
data = firing_rate_data(2,:);
