function M = simulate_dynapics_hipp(p, C, J, input, M, mems)
    
    %  Initialise variables
    u           = p.U.*(ones(p.in, p.out));
    x           = ones(p.in, p.out);
    ref_p       = zeros(p.full,1);
    fired       = zeros(p.full, 1);
    
    delays      = randi([4 5], p.in, p.out).*C;
    delay_win   = zeros(p.in, p.out, 5);
    %  Loop through time
    for t       = 1 : p.SimLength
    
        % [1] Deal with external and recurrent synaptic inputs
    
        % First, generate random external input
        M.Iext(1:p.full) = normrnd(p.mu_e,p.sigma, p.full, 1);

        % Second, input mem 1 at specified times
        activeMems = cellfun(@(x) any(x(:,1)<=t & x(:,2)>=t),{input.simulation});
        M.Iext(horzcat(mems{activeMems})) = normrnd(p.mu_e,p.sigma,1,sum(activeMems)*p.f*p.in).*p.CF; clear activeMems;
        
        % and mem2
        activeMems      = cellfun(@(x) any(x(:,1)<=t & x(:,2)>=t),{input.reactivation});
        if activeMems   == 1
            M.Iext(horzcat(mems{2})) = normrnd(p.mu_e,p.sigma,1,sum(activeMems)*p.f*p.in).*p.RF;
        end
        clear activeMems
    
        % % Third, get synaptic currents (from CA3 to CA1)
        M.Irec              = sum((J.*x.*u.*fired(1:p.in)),1); % (4)
    
        % Finally, update short-term plasticity parameters for E to E connections
        u(1:p.in,1:p.out) = u(1:p.in,1:p.out)  + (((p.U -u(1:p.in,1:p.out))/p.tau_facil) + (p.U.*(1-u(1:p.in,1:p.out)).*fired(1:p.in).*C));
        x(1:p.in,1:p.out) = x(1:p.in,1:p.out) + (((1-x(1:p.in,1:p.out) )/p.tau_decay) - (u(1:p.in,1:p.out) .*x(1:p.in,1:p.out) .*fired(1:p.in).*C));

        % [2] Update membrane potential and check for spiking
    
        % Update membrane potential
        M.V(1:p.in)                = M.V(1:p.in)         + ((-M.V(1:p.in)         + M.Iext(1:p.in)) ./(p.tau_e*ones(p.in,1)));
        M.V(p.in+1:p.full)         = M.V(p.in+1:p.full)  + ((-M.V(p.in+1:p.full)  + M.Irec'+ M.Iext(p.in+1:p.full)) ./(p.tau_e*ones(p.in,1)));

        % Check for spiking
        fired               = M.V > p.SPE & ref_p == 0;
    
        % Update refractory periods for neurons that fired
        ref_p(ref_p~=0)     = ref_p(ref_p~=0) - 1;
        ref_p(fired)        = p.ARP;
    
        % Reset membrane potential for cells which fired
        M.V(fired)          = p.Vr_e*ones(sum(fired(1:p.full)),1);

        % [3] Send spiking outputs along the delay lines
        delay_win(:,:,1)    = 0;                            % Eliminate spikes that have just been transmitted
        delay_win           = circshift(delay_win,-1,3);    % Move all spikes one timestep closer
    
        % Update synapse log based on transmission delays
        pre                 = nonzeros(repmat(fired(1:p.in)',p.in,1) .* repmat((1:p.in),p.in,1) .*C);
        post                = nonzeros(repmat(fired(1:p.in)',p.in,1) .* repmat((1:p.in)',1,p.in) .*C);
        arrives             = nonzeros(repmat(fired(1:p.in)',p.in,1) .* delays .*C); %+t
        ind                 = sub2ind([size(delay_win)], post, pre, arrives);
        delay_win(ind)      = 1; clear pre post arrives ind
        % % [4] Log what needs logging
        
        %get synapses which are activated during both odours
        overlap = intersect(mems{1}, mems{2});
        O = C; NO = C;  all = 1:p.in; all(overlap) = [];
        O(all, :) = 0; NO(overlap, :) = 0; 
        
        % ind1 = find((sum(C(mems{1}, :))>1)); 
        % ind2 = find((sum(C(mems{2}, :))>1)); 
        % coi = intersect(ind1,ind2);
        % full = 1:p.in; full(coi) = [];
        % O=C; NO= C; 
        % O(:, full) = 0; NO(:, coi) = 0;

        % log synaptic parameters for each memory
        % both = [mems{1} mems{2}];
        both = mems{2};
        mem_syn_inds = sub2ind(size(u),repmat(both,1,length(both)),sort(repmat(both,1,length(both))));
        % mem_syn_inds(O(mem_syn_inds)==1);
        M.U_mem1_log(t) = mean(u(mem_syn_inds(O(mem_syn_inds)==1)));
        M.X_mem1_log(t) = mean(x(mem_syn_inds(O(mem_syn_inds)==1))); 

        mem_syn_inds = sub2ind(size(u),repmat(both,1,length(both)),sort(repmat(both,1,length(both))));
        mem_syn_inds(NO(mem_syn_inds)==1);
        M.U_mem2_log(t) = mean(u(mem_syn_inds(NO(mem_syn_inds)==1)));
        M.X_mem2_log(t) = mean(x(mem_syn_inds(NO(mem_syn_inds)==1)));

        % log external input
        M.Iext_log(:, t) = M.Iext;
        % log recurrent input
        M.Irec_log(:, t) = M.Irec;
        M.spikelog(:, t) = fired; 
        M.V_log_out(t) = mean(M.V(p.in+1:p.full));
        M.V_log_in(t) = mean(M.V(1:p.in));
    end
end