function [M, fire_rate_mean] = simulate_dynamics(p, in, M, C, J, mems, first_input, second_input, delay_time)

%  Initialise variables
u           = [[p.U.*(ones(p.Ne, p.Ne)) ; ones(p.Ni, p.Ne)] ones(p.N, p.Ni)];
x           = ones(p.N, p.N);
ref_p       = zeros(p.N,1);
delays      = randi([4 5], p.N, p.N).*C;
delay_win   = zeros(p.N, p.N, 5);
%% input details 
% times that memory is 'on', ms
% in.simulation = [200 (200+100)];
% in.reactivation = [200+delay_time (200+delay_time+50)];

%  Loop through time
for t       = 1 : p.SimLength

    % [1] Deal with external and recurrent synaptic inputs

    % First, generate random external input
    M.Iext(1:p.Ne)      = normrnd(p.mu_e,p.sigma, p.Ne, 1).*p.ex_fact;
    M.Iext(p.Ne+1:end)  = normrnd(p.mu_i, p.sigma, p.Ni, 1).*p.ex_fact; %(3)

    % Second, get memory loading or pinging inputs
    activeMems          = cellfun(@(x) any(x(:,1)<=t & x(:,2)>=t),{in.simulation});

    % if activeMems>0
    %     keyboard
    % end

    M.Iext(horzcat(mems{activeMems}))   = normrnd(p.mu_e,p.sigma,1,sum(activeMems)*p.f*p.Ne).*p.SCF.*p.ex_fact; clear activeMems;
    %% 

    if strcmp(first_input, second_input)
        activeMems      = cellfun(@(x) any(x(:,1)<=t & x(:,2)>=t),{in.reactivation});
        if activeMems   == 1
            M.Iext(1:p.Ne)              = normrnd(p.mu_e,p.sigma, p.Ne, 1).*p.ex_fact.*p.RCF;
            M.Iext(p.Ne+1:end)          = normrnd(p.mu_i, p.sigma, p.Ni, 1).*p.ex_fact.*p.RCF;
            M.Iext_log(:, t)            = M.Iext;
        end
    else
        % or, if different pattern is being presented, activate that pattern with the original contrast factor
        activeMems      = cellfun(@(x) any(x(:,1)<=t & x(:,2)>=t),{in.reactivation});
        if activeMems   == 1
            M.Iext(horzcat(mems{2})) = normrnd(p.mu_e,p.sigma,1,sum(activeMems)*p.f*p.Ne).*p.RCF.*p.ex_fact;
        end
    end
    clear activeMems

    % Third, get reccurent synaptic currents
    M.Irec              = sum(J.*x.*u.*delay_win(:, :, 1),2); % (4)

    % Finally, update short-term plasticity parameters for E to E connections
    u(1:p.Ne,1:p.Ne) = u(1:p.Ne,1:p.Ne) + (((p.U -u(1:p.Ne,1:p.Ne))/p.tau_facil) + (p.U.*(1-u(1:p.Ne,1:p.Ne)).*delay_win(1:p.Ne,1:p.Ne,1)));
    x(1:p.Ne,1:p.Ne) = x(1:p.Ne,1:p.Ne) + (((1-x(1:p.Ne,1:p.Ne))/p.tau_decay) - (u(1:p.Ne,1:p.Ne).*x(1:p.Ne,1:p.Ne).*delay_win(1:p.Ne,1:p.Ne,1)));


    % [2] Update membrane potential and check for spiking

    % Update membrane potential
    M.V                 = M.V  + (-M.V + M.Irec + M.Iext) ./[p.tau_e*ones(p.Ne,1) ; p.tau_i*ones(p.Ni,1)];

    % Check for spiking
    fired               = M.V > p.SPE & ref_p == 0;

    % Update refractory periods for neurons that fired
    ref_p(ref_p~=0)     = ref_p(ref_p~=0) - 1;
    ref_p(fired)        = p.ARP;

    % Reset membrane potential for cells which fired
    M.V(fired)          = [p.Vr_e*ones(sum(fired(1:p.Ne)),1) ; p.Vr_i*ones(sum(fired(p.Ne+1:end)),1)];


    % [3] Send spiking outputs along the delay lines
    delay_win(:,:,1)    = 0;                            % Eliminate spikes that have just been transmitted
    delay_win           = circshift(delay_win,-1,3);    % Move all spikes one timestep closer

    % Update synapse log based on transmission delays
    pre                 = nonzeros(repmat(fired',p.N,1) .* repmat((1:p.N),p.N,1) .*C);
    post                = nonzeros(repmat(fired',p.N,1) .* repmat((1:p.N)',1,p.N) .*C);
    arrives             = nonzeros(repmat(fired',p.N,1) .* delays .*C); %+t
    ind                 = sub2ind([size(delay_win)], post, pre, arrives);
    delay_win(ind)      = 1; clear pre post arrives ind


    % [4] Log what needs logging
    % log synaptic parameters for each memory
    % mem_syn_inds = sub2ind(size(u),repmat(mems{1},1,length(mems{1})),sort(repmat(mems{1},1,length(mems{1}))));
    % mem_syn_inds(C(mem_syn_inds)==1);
    M.U_mem1_log(t) = mean(u(find(C==1)), "all"); % mean(u(mem_syn_inds(C(mem_syn_inds)==1)));
    M.X_mem1_log(t) = mean(x(find(C==1)), "all"); %mean(x(mem_syn_inds(C(mem_syn_inds)==1)));
    
    % mem_syn_inds = sub2ind(size(u),repmat(mems{2},1,length(mems{2})),sort(repmat(mems{2},1,length(mems{2}))));
    % mem_syn_inds(C(mem_syn_inds)==1);
    M.U_mem2_log(t) = mean(u(C), "all"); %mean(u(mem_syn_inds(C(mem_syn_inds)==1)));
    M.X_mem2_log(t) = mean(x(C), "all"); %mean(x(mem_syn_inds(C(mem_syn_inds)==1)));

    
    % log external input
    M.Iext_log(:, t) = M.Iext;
    % log recurrent input
    M.Irec_log(:, t) = M.Irec;
    M.V_log(:, t) = M.Irec;
    M.spikelog(:, t) = fired;

   
    
end

spike_ping = M.spikelog();
spike_ping = sum(spike_ping(:, in.reactivation(1):in.reactivation(2)), 2);
spike_ping = spike_ping(mems{1});
fire_rate_mean = mean(spike_ping/(in.reactivation(2)-in.reactivation(1)));

end